XPCMSG   CSECT
*/********************************************************************/
*/*                                                                  */
*/* Name:        XPCMSG                                              */
*/*                                                                  */
*/* Function:    ZXPC Server WTO message Manager                     */
*/*                                                                  */
*/* Description: Called by ZXPC server routines to issue WTO         */
*/*              messages.                                           */
*/*                                                                  */
*/* Input Regs:  R1  Parmlist                                        */
*/*              R11 ZXVT address                                    */
*/*              R13 Savearea address                                */
*/*              R14 Return address                                  */
*/*              R15 Entry address                                   */
*/*                                                                  */
*/* Regs Usage:  R10 Base address                                    */
*/*              R11 ZXVT address                                    */
*/*              R12 DSA  address                                    */
*/*              R13 Savearea address                                */
*/*                                                                  */
*/* Output Regs: R0  Reason code                                     */
*/*              R1  Output parameter                                */
*/*              R15 Return code                                     */
*/*                                                                  */
*/* Attributes:  TCB-mode; SRB-mode                                  */
*/*              Primary mode                                        */
*/*              Caller protect key                                  */
*/*              Supervisor state                                    */
*/*              Page-fixed                                          */
*/*              Write-protected                                     */
*/*              Dynamic-LPA resident                                */
*/*                                                                  */
*/* Copyright:   Ben Marino. 2021 - 2022 (unpublished)               */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V1R1 | 12072021 | Ben Marino  | Initial version               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
XPCMSG   AMODE 31
XPCMSG   RMODE ANY
         COPY  ZZGBL
         USING XPCMSG,R15              Entry
         STM   R14,R12,GPR@R14(R13)    save caller's regs
         B     MSGINIT                 branch
         ZZMAC GEN=MID,DSECT=NO        module ID
*
MSGINIT  DS    0H
         DROP  R15
         LR    R10,R15                 base
         USING XPCMSG,R10              addressability
         LR    R4,R1                   protect parm reg
         USING ZXVT,R11                ZXVT addressability
         CLC   ZXVTID,=CL4'ZXVT'       ID?
         BNE   MSGABEND                no, ABEND
*
**       Obtain dynamic storage area
*
         STORAGE OBTAIN,LOC=ANY,                                       +
               LENGTH=DSA@SIZE,SP=102,LINKAGE=SYSTEM
         LR    R12,R1
         USING DSA,R12                 set addressability
         LA    R3,DSA@SIZE             DSA size
         LR    R2,R1                   copy address
         XR    R15,R15                 zero
         MVCL  R2,R14                  scrub DSA
         ST    R13,GPR@BWD(,R1)        chain,
         ST    R1,GPR@FWD(,R13)        saveareas.
         LR    R13,R1                  set my savearea
         ST    R4,DSAIPAR              save input parm
*
**       Locate requested WTO message
*
MSG0000  DS    0H
         L     R2,MSGTEND              table end-address
         L     R3,MSGTBLE              table start-address
         L     R1,0(,R4)               msgID address
         MVC   DSAMID,0(R1)            copy WTO msgID
*
MSG0010  DS    0H
         CR    R3,R2                   last entry?
         BL    MSG0020                 no, test further
         MVC   DSARC,=AL4(RC8)         set error RC
         LH    R1,XPC011E              get text length
         LA    R1,4(,R1)               add ROUT/DESC codes
         BCTR  R1,0
         EX    R1,COPYMSG              copy message
         MVC   DSAWTXT+1(7),DSAMID     show error msg-ID
         MVC   DSAWSUB,ZXVTSUBN        show subsystem name
         B     MSG0600                 issue error msg
*
MSG0020  DS    0H
         CLC   DSAMID,4(R3)            MID match?
         BE    MSG0030                 yes, carry on
         LH    R1,0(,R3)               get text length
         LA    R1,3(,R1)               round up to next,
         N     R1,=XL4'FFFFFFFC'       fullword boundary
         LA    R3,4(R1,R3)             add DESC+ROUT codes
         B     MSG0010                 loop
*
MSG0030  DS    0H
         MVI   DSAWTO,BLANK
         MVC   DSAWTO+1(DSAWTOL-1),DSAWTO
         LH    R1,0(,R3)               get text length
         ST    R1,DSATXLN              save text length
         LA    R1,4(,R1)               add DESC+ROUT size
         BCTR  R1,0                    decrement for EXecute
         EX    R1,COPYWTO              copy WTO message
         MVC   DSAWSUB,ZXVTSUBN        insert subsystem name
*
**       Resolve WTO message variables
*
         LA    R6,DSAWTXT              msg text address
         LH    R5,DSAWLEN              get text length
         SH    R5,=H'4'                subtract MCS flags
*
MSG0040  DS    0H
         TM    0(R4),ENDVL             end of parmlist?
         BNZ   MSG0500                 yes, issue target WTO
         LA    R4,4(,R4)               next var ptr
         L     R3,0(,R4)               var data address
*
MSG0050  DS    0H
         CLI   0(R6),C'%'              var ID found?
         BE    MSG0060                 yest test further
         CLI   0(R6),C'!'              var ID found?
         BE    MSG0060                 yest test further
         CLI   0(R6),C'@'              var ID found?
         BE    MSG0060                 yest test further
         LA    R6,1(,R6)               walk thru text
         BCT   R5,MSG0050              loop
         B     MSG0500                 issue WTO message
*
MSG0060  DS    0H
         LR    R1,R6                   copy var ID address
         MVC   DSAVARID,0(R6)          save var ID found
*
MSG0070  DS    0H
         CLC   DSAVARID,0(R6)          end of var ID found?
         BNE   MSG0080                 yes, compute var ID length
         LA    R6,1(,R6)               walk thru text
         BCT   R5,MSG0070              loop
*
MSG0080  DS    0H
         LR    R2,R6                   copy msg text address
         SLR   R2,R1                   compute var length
         CLI   DSAVARID,C'%'           text var ID?
         BNE   MSG0090                 no, test further
         BCTR  R2,0                    decrement for EXecute
         EX    R2,MOVEVAR              move var data to msg
         B     MSG0400                 loop
*
MSG0090  DS    0H
         CLI   DSAVARID,C'!'           hexadecimal var ID?
         BNE   MSG0300                 no, test further
         MVC   DSASRC,0(R3)            get var value
         ZZMAC GEN=CNVX,DSAVAR,DSASRC,TR=TRANTAB
         LA    R15,2                   compare length
         CLR   R2,R15                  display 6-hex digits?
         BH    MSG0100                 no, test further
         MVC   0(2,R1),DSAVAR+6        move var data to msg
         B     MSG0400                 loop
*
MSG0100  DS    0H
         LA    R15,4                   compare length
         CLR   R2,R15                  display 4-hex digits,
         BH    MSG0200                 no, test further
         MVC   0(4,R1),DSAVAR+4        move var data to msg
         B     MSG0400                 loop
*
MSG0200  DS    0H
         MVC   0(8,R1),DSAVAR          move var data to msg
         B     MSG0400                 loop
*
MSG0300  DS    0H
         CLI   DSAVARID,C'@'           decimal var ID?
         BNE   MSG0400                 no, carry on
         L     R2,0(,R3)               get var value
         CVD   R2,DSADWRD              make decimal
         OI    DSADWRD+7,X'0F'         fix sign
         UNPK  DSAVAR,DSADWRD          unpack it
         MVC   0(8,R1),DSAVAR          move var data to msg
*
MSG0400  DS    0H
         LA    R6,1(,R6)               walk thru text
         BCT   R5,MSG0040              loop
*
**       Issue requested WTO message
*
MSG0500  DS    0H
         TM    ZXVTFLG2,ZXVT@CMP       CMP=YES?
         BZ    MSG0600                 no, skip compress
         ZZCALL SR=COMPMSG             yes, compress msg
*
MSG0600  DS    0H
         USING PSA,0
         ICM   R1,15,PSATOLD           SRB-mode caller?
         BZ    MSG0700                 yes
         WTO   MF=(E,DSAWTO)           issue WTO message
         B     MSG0999                 exit
*
MSG0700  DS    0H
         WTO   MF=(E,DSAWTO),          issue WTO message               +
               LINKAGE=BRANCH          branch entry
*
MSG0999  DS    0H
         ST    R15,DSARC               save RC
         ST    R0,DSARSN               save RSN
         ST    R1,DSAGR1               save EOM ID
*---------------------------------------------------------------------*
*        Exit Routine                                                 *
*--------+---------+---------+---------+---------+---------+---------+*
MSGEXIT  DS    0H
         L     R13,GPR@BWD(,R13)       caller savearea
         LA    R3,GPR@R15(,R13)        R15 slot address
         MVC   0(DSA@OPZL,R3),DSAOPAR  return output parms
         STORAGE RELEASE,COND=NO,                                      +
               ADDR=(12),LENGTH=DSA@SIZE,SP=102,LINKAGE=SYSTEM
         LM    R14,R12,GPR@R14(R13)    restore caller's regs
         BR    R14                     return
*---------------------------------------------------------------------*
*        ABEND Exit                                                   *
*--------+---------+---------+---------+---------+---------+---------+*
MSGABEND DS    0H
         ABEND 2022,DUMP,REASON=(R2)   ABEND
*---------------------------------------------------------------------*
*        EXecuted Instructions                                        *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0H
MOVEVAR  MVC   0(*-*,R1),0(R3)         EXecuted instruction
COPYWTO  MVC   DSAWTO(*-*),0(R3)       EXecuted instruction
COPYMSG  MVC   DSAWTO(*-*),XPC011E     Executed instruction
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
MSGTEND  DC    A(WTOTBEND)             WTO table end-address
MSGTBLE  DC    A(WTOTABLE)             WTO table start-address
TRANTAB  DC    CL16'0123456789ABCDEF'  translate table
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name:         COMPMSG                                            */
*/*                                                                  */
*/* Function:     Compress WTO message subroutine                    */
*/*                                                                  */
*/* Input Regs:   R11 ZXVT address                                   */
*/* Input Regs:   R13 savearea address                               */
*/*               R14 return address                                 */
*/*               R15 entry point address                            */
*/*                                                                  */
*/* Regs Usage:   R11 ZXVT address                                   */
*/*               R10 Base address                                   */
*/*               R12 DSA address                                    */
*/*               R13 Savearea address                               */
*/*                                                                  */
*/* Output Regs:  R0  Reason code                                    */
*/*               R1  Output parameter                               */
*/*               R15 Return code                                    */
*/*                                                                  */
*/********************************************************************/
*/-------+---------+---------+---------+---------+---------+---------*/
COMPMSG  DS    0H
         USING DSA,R12
         B     12(,R15)
         DC    CL8'COMPMSG'            PC routine
         STM   R14,R12,GPR@R14(R13)    save caller's regs
         LR    R10,R15                 set base address
         USING COMPMSG,R10             base addressability
         LA    R1,DSASBSA              subroutine save area
         ST    R13,GPR@BWD(,R1)        chain,
         ST    R1,GPR@FWD(,R13)        save,
         LR    R13,R1                  areas.
*
         LA    R4,DSAXTXT              compress msg address
         LA    R3,DSAWTXT              WTO msg text address
         LH    R2,DSAWLEN              WTO text length
         SH    R2,=H'16'               minus MCS flags & msg prefix
         LA    R2,0(R2,R3)             WTO msg end-address
         MVC   DSAROUT,0(R2)           save ROUTCDE & DESC codes
         MVI   DSAXTXT,BLANK           clear WTO workarea
         MVC   DSAXTXT+1(DSAXTXTL-1),DSAXTXT
         B     COMP020                 carry on
*
COMP010  DS    0H
         CLI   0(R3),XZERO             end of text?
         BE    COMP035                 yes, test further
         CLI   0(R3),BLANK             blank?
         BNE   COMP020
         LR    R1,R3                   msg text address
         BCTR  R1,0                    subtract one
         CLI   0(R1),BLANK             previous char blank?
         BNE   COMP020                 no, copy char
         LA    R3,1(,R3)               next msg text address
         B     COMP030                 loop
*
COMP020  DS    0H
         MVC   0(1,R4),0(R3)           copy char
         LA    R3,1(,R3)               next msg text char
         LA    R4,1(,R4)               next msg text char
*
COMP030  DS    0H
         CLR   R3,R2                   all done?
         BL    COMP010                 no, loop
*
COMP035  DS    0H
         MVI   DSAWTXT,BLANK           clear WTO workarea
         MVC   DSAWTXT+1(DSAWTXTL-1),DSAWTXT
         LA    R2,DSAXTXT              msg text address
         SLR   R4,R2                   get compresed msg length
         BCTR  R4,0
         EX    R4,COMPCOPY             copy compressed msg text
*
         LH    R2,DSAWLEN              MCS flags & msg length
         LA    R3,DSAWTO               WTO msg address
         LA    R3,0(R2,R3)             end-of-text address
         MVC   0(4,R3),DSAROUT         insert ROUTCDE & DESC code
*
COMPEXIT DS    0H
         L     R13,GPR@BWD(,R13)       mainline savearea
         LM    R14,R12,GPR@R14(R13)    restore mainline regs
         BR    R14                     return
*---------------------------------------------------------------------*
*        EXecuted Instructions                                        *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0H
COMPCOPY MVC   DSAWTXT(*-*),DSAXTXT    copy msg text
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*--------+---------+---------+---------+---------+---------+---------+*
**       WTO messages                                                 *
*--------+---------+---------+---------+---------+---------+---------+*
WTOTABLE DS    0F
XPC000I  WTO   'XPC000I ZXPC Server initialization in progress',       +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
XPC001I  WTO   'XPC001I ZXPC Server initialization complete',          +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
XPC002I  WTO   'XPC002I ZXPC Server module %%%%%%%% added to dynamic LP+
               A',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
XPC003E  WTO   'XPC003E ZXPC Dynamic-LPA %%% for module %%%%%%%% failed+
               . RC=!!!! RSN=!!!!!!!!',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
XPC004E  WTO   'XPC004E ZXPC 4-character subsystem name required',     +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
XPC005E  WTO   'XPC005E ZXPC Server initialization failed',            +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
XPC006E  WTO   'XPC006E ZXPC Invalid %%% option specified',            +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
XPC007E  WTO   'XPC007E ZXPC CSVDYNEX %%%%%%%%%%%%%%%% %%%%%%%% %%%%%%%+
               % RC=!!!! RSN=!!!!!!!!',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
XPC008I  WTO   'XPC008I ZXPC Previous instance resources released',    +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
XPC009I  WTO   'XPC009I ZXPC Server security class SAF=NOCALL specified+
               .',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
XPC010E  WTO   'XPC010E ZXPC CPF command prefix define failed. RC=!!!! +
               RSN=!!!!!!!!',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
XPC011E  WTO   'XPC011E ZXPC Server MID=%%%%%%% not found in message ta+
               ble',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
XPC012I  WTO   'XPC012I ZXPC Server %%% option set to %%%',            +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
XPC013E  WTO   'XPC013E ZXPC Server command invalid. %%%%%%%%%%%%%%%%',+
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
XPC014I  WTO   'XPC014I ZXPC Server option set to SAF=%%%%%%%%',       +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
XPC015E  WTO   'XPC015E ZXPC Invalid command authority. SAF=!!!! RC=!!!+
               ! RSN=!!!!!!!! Command=%%%%%%%%%%%%%%%%',               +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
XPC016I  WTO   'XPC016I ZXPC Server trace data crumbs cleared',        +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
XPC017E  WTO   'XPC017E ZXPC Invalid %%%% option specified',           +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
XPC018I  WTO   'XPC018I ZXPC EOM=!!!!!!!! EOT=!!!!!!!! CMD=!!!!!!!! WTO+
               =!!!!!!!!',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
XPC019E  WTO   'XPC019E ZXPC Invalid global variable specified. MSAS=%%+
               %%',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
XPC020E  WTO   'XPC020E ZXPC WTO display failed. RC=!!!! ID=!!!!!!!!', +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
XPC021I  WTO   'XPC021I ZXPC Server module trace trap %%%%%%%%%%%%',   +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
XPC022I  WTO   'XPC022I ZXPC Server activation %%%%%%%%',              +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
XPC023I  WTO   'XPC023I ZXPC Server deactivation %%%%%%%%',            +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
XPC024I  WTO   'XPC024I ZXPC *** free entry ***',                      +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
XPC025I  WTO   'XPC025I ZXPC *** free entry ***',                      +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
XPC026I  WTO   'XPC026I ZXPC *** free entry ***',                      +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
XPC027I  WTO   'XPC027I ZXPC *** free entry ***',                      +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
XPC097E  WTO   'XPC097E ZXPC Command invalid; %%%%%%%%%%%%%%%%%%%%%%%%'+
               ,ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
XPC098E  WTO   'XPC098E ZXPC Enter %%%% HELP for a list of valid comman+
               ds',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
XPC999I  WTO   'XPC999I ZXPC %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%',   +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
WTOTBEND EQU   *
         DS    0D
WTOTBSZE EQU   *-WTOTABLE
*---------------------------------------------------------------------*
*        Dynamic Storage Area                                         *
*--------+---------+---------+---------+---------+---------+---------+*
DSA      DSECT ,
DSASAVE  DS    18F                     mainline savearea
DSASBSA  DS    18F                     subroutine savearea
         DS    0X
DSAFLG1  DS    XL1                     flags
DSA@RV0  EQU   X'80'                   -available
DSA@RV1  EQU   X'40'                   -available
DSA@RV2  EQU   X'20'                   -available
DSA@RV3  EQU   X'10'                   -available
DSA@RV4  EQU   X'08'                   -available
DSA@RV5  EQU   X'04'                   -available
DSA@RV6  EQU   X'02'                   -available
DSA@RV7  EQU   X'01'                   -available
         DS    0X
DSAVARID DS    CL1                     variable ID
DSAFLGSX DS    XL2                     -available
         DS    0F
DSAIPAR  DS    F                       input PARM reg
DSATXLN  DS    F                       WTO text length
DSAROUT  DS    F                       ROUTCDE & DESC codes
         DS    0F
DSAOPAR  DS    0F                      output parms
DSARC    DS    F                       -R15 = RC
DSARSN   DS    F                       -R0  = RSN
DSAGR1   DS    F                       -R1  = output parm
DSA@OPZL EQU   *-DSAOPAR               keep it together
         DS    0C
DSAMID   DS    CL8                     target message ID
         DS    0F
DSASRC   DS    XL4                     variable source
DSASRC2  DS    XL4                     variable source
DSASRCL  EQU   *-DSASRC                variable length
DSAVAR   DS    CL8                     variable data
         DS    CL1                     slack byte
DSAVARL  EQU   *-DSAVAR                variable length
         DS    0D
DSADWRD  DS    D                       conversion workarea
DSAPACK  DS    PL4                     conversion workarea
DSAPAK2  DS    PL4                     conversion workarea
DSA@PSZE EQU   *-DSADWRD
         DS    0F
DSAWTO   DS    0CL124                  WTO message workarea
DSAWLEN  DS    AL2                     -text length
         DS    AL2                     -MCS flags
DSAWID   DS    CL7                     -message ID
         DS    CL1                     -blank
DSAWSUB  DS    CL4                     -subsystem name
DSAWTXT  DS    CL108                   -msg text
DSAWTXTL EQU   *-DSAWTXT
DSAWTOL  EQU   *-DSAWTO                WTO workarea size
         DS    0F
DSAXTXT  DS    CL108                   compress text workarea
DSAXTXTL EQU   *-DSAXTXT               compress text workarea size
         DS    0D
DSA@SIZE EQU   *-DSA                   DSA size
*---------------------------------------------------------------------*
*        Server data areas                                            *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         ZZXVT ,
         ZZEQU ,
*---------------------------------------------------------------------*
*        System data areas                                            *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         IHAPSA ,
         END
